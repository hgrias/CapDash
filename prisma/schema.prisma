// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  id           String        @id @default(cuid())
  name         String
  slug         String        @unique
  websiteUrl   String?
  imageUri     String?
  users        User[]
  legislators  Legislator[]
  interactions Interaction[]
}

model User {
  id             String        @id @default(cuid())
  name           String
  email          String        @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  interactions   Interaction[]
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  Note           Note[]

  @@index([organizationId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Legislator {
  id                  String         @id @default(cuid())
  legiscanId          Int?
  currentSessionId    Int
  firstName           String
  lastName            String
  district            String
  personHash          String?
  imageUri            String?
  phone               String?
  email               String?
  capitolOfficeNumber String?
  districtAddress     String?
  capitolAddress      String?
  websiteUrl          String?
  chamberWebsiteUrl   String?
  capitolWebsiteUrl   String?
  nickName            String?
  organizationId      String
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @default(now()) @updatedAt
  state               State
  party               Party
  role                LegislatorRole
  organization        Organization   @relation(fields: [organizationId], references: [id])
  interactions        Interaction[]
  staffers            Staffer[]
  notes               Note[]

  @@unique([role, state, district, organizationId])
  @@index([organizationId])
}

model Staffer {
  id           String     @id @default(cuid())
  name         String
  email        String
  phone        String
  position     String     @default("Staffer")
  legislator   Legislator @relation(fields: [legislatorId], references: [id])
  legislatorId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
}

model LegislativeSession {
  id           Int     @id
  yearStart    Int
  yearEnd      Int
  sessionTag   String?
  sessionTitle String?
  sessionName  String?
  active       Boolean @default(false)
  archived     Boolean @default(false)
  special      Boolean @default(false)
  sineDie      Boolean @default(false)
  state        State

  @@unique([id, state])
}

model Interaction {
  id             String          @id @default(cuid())
  createdBy      String
  legislatorId   String
  content        String
  sessionId      Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  actionNeeded   Boolean         @default(false)
  type           InteractionType
  organizationId String
  organization   Organization    @relation(fields: [organizationId], references: [id])
  user           User            @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  legislator     Legislator      @relation(fields: [legislatorId], references: [id], onDelete: Cascade)

  @@index([organizationId])
}

model Note {
  id           Int        @id @default(autoincrement())
  content      String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  createdBy    String
  legislatorId String
  parentNoteId Int?
  user         User       @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  legislator   Legislator @relation(fields: [legislatorId], references: [id], onDelete: Cascade)
  parentNote   Note?      @relation("ChildNotes", fields: [parentNoteId], references: [id])
  childNotes   Note[]     @relation("ChildNotes")
}

enum InteractionType {
  BILL
  TESTIMONY
  GENERAL
  UNKNOWN
}

enum State {
  AL
  AK
  AZ
  AR
  CA
  CO
  CT
  DE
  FL
  GA
  HI
  ID
  IL
  IN
  IA
  KS
  KY
  LA
  ME
  MD
  MA
  MI
  MN
  MS
  MO
  MT
  NE
  NV
  NH
  NJ
  NM
  NY
  NC
  ND
  OH
  OK
  OR
  PA
  RI
  SC
  SD
  TN
  TX
  UT
  VT
  VA
  WA
  WV
  WI
  WY
}

enum Party {
  D // Democrat
  R // Republican
  I // Independent
  G // Green
  L // Libertarian
  N // Nonpartisan
}

enum LegislatorRole {
  Sen
  Rep
}
